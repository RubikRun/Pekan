0000 18.02.2025 (DONE): Add "m_" prefix to all private member variables

0001 18.02.2025 (DONE): Add comments on class PekanEngine and class PekanRenderer

0002 23.02.2025 (DONE): Create a base class RenderComponent with common functions and variables
                        between different OpenGL objects, for example Shader, VertexBuffer, VertexArray, etc.
                        All of them need to have create(), destroy(), bind(), unbind(), isValid(), id, etc.

0003 23.02.2025 (DONE): Provide optional parameter of create() function of VertexBuffer and IndexBuffer
                        for the value that is currently hardcoded as GL_STATIC_DRAW

0004 24.02.2025 (DONE): Wrap all OpenGL calls in an OpenGL error-checking macro

0005 24.02.2025 (DONE): In class PekanRenderer make all non-client functions be private, and allow usage for internal classes with "friend" keyword.

0006 24.02.2025 (DONE): Do some error-checking in most functions in OpenGL wrapper classes. Mostly check isValid() and bind().
                        Think about whether we want to do these checks in every function (secure, but may cost performance)

0007 01.03.2025 (DONE): Do we need to keep m_window as member of PekanGUIWindow when we already have a static s_window in PekanEngine?

0008 04.03.2025 (DONE): Add support for line numbers in log messages in PekanLogger

0009 19.03.2025 (DONE): Add option for changing window's title in applications

0010 20.03.2025 (DONE): Limit FPS

0011 21.03.2025 (DONE): Event system

0012 21.03.2025 (DONE): Provide a way for applications to specify their way of closing

0013 25.03.2025 (DONE): In Demo03 see what happens if window is resized during gameplay. My guess is snake's squares will not remain square.
                        Make them respond dynamically to window's resolution.
                        NOTE FROM FUTURE: Decided not to do that because Demo03 is full screen anyway, so resolution will not be changing.

0014 29.03.2025 (DONE): Create an ASSERT() mechanism

0015 03.04.2025 (DONE): Create an event queue so that events can be handled together at once, at a specific stage of the main loop.

0016 03.04.2025 (DONE): Create a Window class

0017 05.04.2025 (DONE): Create Pekan enums corresponding to event-related enums in GLFW, like GLFW_KEY_W

0018 11.04.2025 (DONE): Use PekanEngine's event polling on these 2 lines in PekanApplication.cpp
                            if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
                            glfwGetFramebufferSize(window, &windowWidth, &windowHeight);

0019 14.04.2025 (DONE): Create a way for derived applications to set up layer stack without directly touching
                        the member variable m_layerStack. Maybe add an output parameter to _init() function
                        that will be used by the base PekanApplication::init()

0020 25.04.2025 (DONE): Create a delta-time mechanism for FPS-independent movement

0021 15.05.2025 (TODO): Research glBufferSubData(). Decide if we need it in Pekan.

0022 15.05.2025 (DONE): In RenderObject's setVertexData() and setIndexData() functions do something so that client doesn't have to provide BufferDataUsage each time.
                        It should be optional.
                        If they don't provide a BufferDataUsage then the BufferDataUsage passed in the beggining to the create() function should be used.

0023 15.05.2025 (TODO): Create enums for parameters in class Texture

0024 17.05.2025 (DONE): Think about how many and which ones of the create() overloads in RenderObject we need.
                        I would say it's good to have create() overloads for combinations of the required components (vertices and shader)
                        but the optional components (indices and texture) should be set by explicitly calling a set*() function.

0025 17.05.2025 (DONE): Check what happens if you call setTextureImage() more than once on a single RenderObject

0026 20.05.2025 (TODO): Check if passing vertices to TriangleShape's create() in reverse order still works (change clockwise-ness of vertices).

0027 22.05.2025 (TODO): Think about using getVertexData() in createRenderObject() instead of having a vertexData parameter

0028 24.05.2025 (TODO): Think about the relationship between textures and a shader in RenderObject.
                        More specifically when client changes the shader in a RenderObject what should happen to the textures?
                        Currently they are just all deleted and client should set textures anew if they need them in the new shader.
                        Is this an okay behavior? Is there something else that can be done?

0029 25.05.2025 (TODO): What will happen if you call a create() function of a 2D shape more than once, without calling destroy() in between?

0030 27.05.2025 (TODO): Create a 2D camera that can be moved with mouse and/or with WASD keys

0031 27.05.2025 (TODO): Create a world space and a resolution-independent way to render 2D shapes
