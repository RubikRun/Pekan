0000 18.02.2025 (DONE): Add "m_" prefix to all private member variables

0001 18.02.2025 (DONE): Add comments on class PekanEngine and class PekanRenderer

0002 23.02.2025 (DONE): Create a base class RenderComponent with common functions and variables
                        between different OpenGL objects, for example Shader, VertexBuffer, VertexArray, etc.
                        All of them need to have create(), destroy(), bind(), unbind(), isValid(), id, etc.

0003 23.02.2025 (DONE): Provide optional parameter of create() function of VertexBuffer and IndexBuffer
                        for the value that is currently hardcoded as GL_STATIC_DRAW

0004 24.02.2025 (DONE): Wrap all OpenGL calls in an OpenGL error-checking macro

0005 24.02.2025 (DONE): In class PekanRenderer make all non-client functions be private, and allow usage for internal classes with "friend" keyword.

0006 24.02.2025 (DONE): Do some error-checking in most functions in OpenGL wrapper classes. Mostly check isValid() and bind().
                        Think about whether we want to do these checks in every function (secure, but may cost performance)

0007 01.03.2025 (DONE): Do we need to keep m_window as member of PekanGUIWindow when we already have a static s_window in PekanEngine?

0008 04.03.2025 (DONE): Add support for line numbers in log messages in PekanLogger

0009 19.03.2025 (DONE): Add option for changing window's title in applications

0010 20.03.2025 (DONE): Limit FPS

0011 21.03.2025 (DONE): Event system

0012 21.03.2025 (DONE): Provide a way for applications to specify their way of closing

0013 25.03.2025 (DONE): In Demo03 see what happens if window is resized during gameplay. My guess is snake's squares will not remain square.
                        Make them respond dynamically to window's resolution.
                        NOTE FROM FUTURE: Decided not to do that because Demo03 is full screen anyway, so resolution will not be changing.

0014 29.03.2025 (DONE): Create an ASSERT() mechanism

0015 03.04.2025 (DONE): Create an event queue so that events can be handled together at once, at a specific stage of the main loop.

0016 03.04.2025 (DONE): Create a Window class

0017 05.04.2025 (DONE): Create Pekan enums corresponding to event-related enums in GLFW, like GLFW_KEY_W

0018 11.04.2025 (DONE): Use PekanEngine's event polling on these 2 lines in PekanApplication.cpp
                            if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
                            glfwGetFramebufferSize(window, &windowWidth, &windowHeight);

0019 14.04.2025 (DONE): Create a way for derived applications to set up layer stack without directly touching
                        the member variable m_layerStack. Maybe add an output parameter to _init() function
                        that will be used by the base PekanApplication::init()

0020 25.04.2025 (DONE): Create a delta-time mechanism for FPS-independent movement

0021 15.05.2025 (DONE): Research glBufferSubData(). Decide if we need it in Pekan.

0022 15.05.2025 (DONE): In RenderObject's setVertexData() and setIndexData() functions do something so that client doesn't have to provide BufferDataUsage each time.
                        It should be optional.
                        If they don't provide a BufferDataUsage then the BufferDataUsage passed in the beggining to the create() function should be used.

0023 15.05.2025 (DONE): Create enums for parameters in class Texture

0024 17.05.2025 (DONE): Think about how many and which ones of the create() overloads in RenderObject we need.
                        I would say it's good to have create() overloads for combinations of the required components (vertices and shader)
                        but the optional components (indices and texture) should be set by explicitly calling a set*() function.

0025 17.05.2025 (DONE): Check what happens if you call setTextureImage() more than once on a single RenderObject

0026 20.05.2025 (DONE): Check if passing vertices to TriangleShape's create() in reverse order still works (change clockwise-ness of vertices).

0027 22.05.2025 (DONE): Think about using getVertexData() in createRenderObject() instead of having a vertexData parameter

0028 24.05.2025 (DONE): Think about the relationship between textures and a shader in RenderObject.
                        More specifically when client changes the shader in a RenderObject what should happen to the textures?
                        Currently they are just all deleted and client should set textures anew if they need them in the new shader.
                        Is this an okay behavior? Is there something else that can be done?

0029 25.05.2025 (DONE): What will happen if you call a create() function of a 2D shape more than once, without calling destroy() in between?

0030 27.05.2025 (DONE): Create a 2D camera that can be moved with mouse and/or with WASD keys

0031 27.05.2025 (DONE): Create a world space and a resolution-independent way to render 2D shapes

0032 28.05.2025 (DONE): Implement triangulation algorithm in PolygonShape to support non-convex polygons

0033 11.06.2025 (DONE): Add support for rotation of 2D shapes

0034 11.06.2025 (DONE): Think about maybe removing the overload of Shape::render() that doesn't take in a camera parameter

0035 15.06.2025 (DONE): Make CameraController2D zoom at the direction of the mouse instead of towards the center

0036 16.06.2025 (DONE): Add overload of Camera2D's setSize() function that takes in a single float - the scale,
                        and automatically calculates width and height with the same ratio as window's resolution.

0037 16.06.2025 (DONE): Fix bug in CameraController2D - when camera's size is different from window's resolution
                        the translation speed is wrong. We need to take into acount the ratio of camera's size to window's resolution.

0038 16.06.2025 (DONE): Fix bug with CameraController2D receiving events from ImGui layer.
                        For example, when you move an ImGui slider left and right, the camera behind it also moves left and right.

0039 25.06.2025 (DONE): Add "bool dynamic" parameter to create() functions of all shape types.
                        It should do the same as before. I just removed it for a bit while restructuring shape classes.

0040 30.06.2025 (DONE): Use a 1D texture for batch rendering of 2D shapes to pass colors to shader,
                        instead of having a color attribute on each vertex (wasteful for memory)

0041 01.07.2025 (DONE): Think about using more than 1 batch for batch rendering.
                        Maybe having some reasonable limit of vertices/indices per batch,
                        and when we reach it we can draw the batch and start a new one.

0042 03.07.2025 (DONE): Rename classes that have only pure virtual functions with the "I" prefix,
                        for example EventListener -> IEventListener

0043 05.07.2025 (DONE): Change core architecture so that window is not created by client code,
                        or think of something else. Maybe also move all OpenGL and window logic into Renderer instead of Core,
                        or better yet create a new module Graphics. Idk, many options, think about it.
                        Problem is there isn't a good moment to initialize Renderer2D.

0044 05.07.2025 (DONE): Why does this function in PekanEngine return a reference and not a const reference?
                            inline static Window& getWindow() { return s_window; }

0045 05.07.2025 (DONE): Fix Demo05 and Demo06, shapes are missing

0046 05.07.2025 (DONE): Remove
                            static glm::ivec2 getWindowSize();
                        from PekanEngine

0047 05.07.2025 (DONE): Think about moving ImGui to its own module and subsystem called GUI, instead of having it in Core.

0048 06.07.2025 (DONE): Rename project Renderer to Renderer2D. Let's have a single subsystem per module and their names to always match.

0049 07.07.2025 (DONE): Move numberOfSamples member from WindowProperties to ApplicationProperties

0050 12.07.2025 (DONE): Is it a problem that RenderObject and ShapesBatch might use the same texture slots?
                        Probably not, because they do separate draw calls and have separate shaders.
                        Still, good to check.

0051 12.07.2025 (DONE): Maybe rename the 2 shaders
                            2D_BatchRendering_VertexShader.glsl
                            SolidColor_BatchRendering_FragmentShader.glsl
                        into something reflecting that they are specifically for shapes.
                        Previously they were general-purpose - could be used for other objects as well,
                        but now they are specific to batched shapes.
                        If we use them for something else, it will probably be broken.
                        Check if that's the case.
                        If something is broken, we'll need to keep these 2 current shaders (but renamed)
                        and bring back their older version as well.

0052 20.07.2025 (DONE): Remove "inline" from some places

0053 24.07.2025 (DONE): Rename class GUI to GUISystem and class Graphics to GraphicsSystem.

0054 24.07.2025 (DONE): Create a mechanism in LayerStack (or elsewhere) that allows for client code to specify
                        a hierarchy of layer initialization (which layers should be initialized before which ones)

0055 25.07.2025 (DONE): Fix Demo06 to not crash if default shapes count is different than max shapes count.
                        Currently it just creates the default number of shapes at initialization time
                        and then if you increase them during runtime it crashes.

0056 25.07.2025 (TODO): Change class Layer's getName() function to be pure virtual and remove m_name member, maybe also remove constructor.
