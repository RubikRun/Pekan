----------
14.01.2025
----------

{
Let's begin by setting up a CMake project.

We need a
    CMakeLists.txt
file in the root directory.
For now we'll have a single project called
    Pekan
All source code will be under directory
    src
Source code for project Pekan will be under
    src/Pekan
Let's create a single source file there
    main.cpp
In CMake we can make project Pekan compile into an executable using that source file.
    add_executable(Pekan src/Pekan/main.cpp)

Now we can configure project and generate a Visual Studio solution
    cmake -B build
Then we can open Visual Studio solution, build it and run it.

All files generated under directory
    build
should not be commited to Git, so let's add that directory to
    .gitignore
}

{
Generated Visual Studio solution has 4 configurations available, I want only 2
    Release, Debug
so let's make CMake generate a solution with only those 2
    set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
}

----------
17.01.2025
----------

{
I want to use C++ 17, so let's set this as a requirement in CMake.
}

{
When CMake generates a fresh new Visual Studio solution,
the startup project by default is ALL_BUILD.
I want the startup project to be Pekan.
We can achieve this in CMake 3.6 and above, like that:
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Pekan)
}

----------
19.01.2025
----------
{
Let's setup OpenGL now.
First git clone GLFW
    https://github.com/glfw/glfw
under
    dep/glfw
Then copy example code from
    https://www.glfw.org/documentation.html
to
    src/Pekan/main.cpp
GLFW already has a working CMake file
    dep/glfw/CMakeLists.txt
In order to build GLFW and link Pekan against it,
we need to add GLFW as subdirectory
    add_subdirectory(dep/glfw)
This will generate a GLFW project and build it into a static library.
Then we can link against that static library like that
    target_link_libraries(Pekan PRIVATE glfw)
We also need to link against
    opengl32.lib
so do that
    target_link_libraries(Pekan PRIVATE glfw opengl32.lib)
GLFW's CMake file generates some additional projects
    uninstall
    update_mappings
I don't want to have those.
So before adding GLFW subdirectory we can set these options
    set(GLFW_BUILD_DOCS OFF)
    set(GLFW_INSTALL OFF)
and this will make GLFW NOT generate
    uninstall
However, looking at GLFW's CMake, the other project
    update_mappings
really cannot be removed with an option
so I will just manually remove it (put it inside of an if(0) statement) in
    dep/glfw/src/CMakeLists.txt
Another thing that I don't like is that the glfw project is generated under folder
    GLFW3
I want it to be under
    dep
where I will put other dependecy projects as well,
so I manually changed this in
    dep/glfw/src/CMakeLists.txt
I changed folder "GLFW3" to folder "dep".

GLFW is done now.
}

----------
21.01.2025
----------
{
We need to setup GLAD for loading OpenGL function pointers.
Go to this site
    https://glad.dav1d.de/
Select gl
    Version 4.3
Select Profile
    Core
Make sure that "Generate a loader" under Options is checked.
Click "Generate".
Download file
    glad.zip
and extract it into a folder
    dep/glad
Now we'll need to compile GLAD into a static library.
We can do that with a CMake file
    dep/glad/CMakeLists.txt
and then in our root CMake file
    CMakeLists.txt
we need to add GLAD as a subdirectory
    add_subdirectory(dep/glad)
and add GLAD to the list of link libraries for Pekan
    target_link_libraries(Pekan PRIVATE glad glfw opengl32.lib)
That's it

----------
22.01.2025
----------

Now let's write some OpenGL demo code in
    main.cpp
just to see if GLFW and GLAD work as expected.
I copied and modified a bit an example from
    learnopengl.com
    https://learnopengl.com/Getting-started/Hello-Triangle
It draws a rectangle in the middle of the window.
Seems to work, and everything works out of the box with CMake.

OpenGL setup is done now.
}

----------
24.01.2025
----------
{
Next step is to setup ImGui.
First git clone ImGui from here
    https://github.com/ocornut/imgui
BUT get the docking branch
    git clone --recursive https://github.com/ocornut/imgui.git -b docking
Put it under
    dep/imgui
We'll need to compile ImGui into a static library.
We can do that with a CMake file
    dep/imgui/CMakeLists.txt
and then in our root CMake file
    CMakeLists.txt
we need to add ImGui as a subdirectory
    add_subdirectory(dep/imgui)
and add ImGui to the list of link libraries for Pekan
    target_link_libraries(Pekan PRIVATE imgui glad glfw opengl32.lib)
ImGui's CMake file is going to be similar to GLAD's CMake file
but we have more source files
    add_library(imgui STATIC
        imgui.cpp
        imgui_draw.cpp
        imgui_tables.cpp
        imgui_widgets.cpp
        imgui_demo.cpp # TODO: This source file is only needed for ImGui's demo, so we can later remove it
        backends/imgui_impl_opengl3.cpp
        backends/imgui_impl_glfw.cpp
    )
and we have to link GLFW there as well
    target_link_libraries(imgui PUBLIC glfw)
That's it. Not it builds imgui.lib correctly.
Let's see now how we can use ImGui in the source code.
I'll copy the example from imgui repo
    examples/example_glfw_opengl3/main.cpp
and integrate it in my current code here
    Pekan/src/main.cpp
It worked!
Now we have the ImGui demo, together with our OpenGL demo.
}
